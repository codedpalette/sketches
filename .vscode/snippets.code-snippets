{
  // Place your sketches workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Sketch 2D": {
    "scope": "typescript",
    "prefix": "sketch2D",
    "body": [
      "import { pixi } from \"library/core/sketch\"",
      "import { drawBackground } from \"library/drawing/helpers\"",
      "import { Container, Graphics } from \"pixi.js\"",
      "",
      "export default pixi(({ random, bbox }) => {",
      "\tconst container = new Container()",
      "\tcontainer.addChild(drawBackground(\"white\", bbox))",
      "\tcontainer",
      "\t\t.addChild(new Graphics())",
      "\t\t.rect(-bbox.width / 4, -bbox.height / 4, bbox.width / 2, bbox.height / 2)",
      "\t\t.fill({ color: random.color() })",
      "\treturn { container }",
      "})",
      ""
    ]
  },
  "Sketch3D": {
    "scope": "typescript",
    "prefix": "sketch3D",
    "body": [
      "import { three } from \"library/core/sketch\"",
      "import { BoxGeometry, Color, Mesh, MeshBasicMaterial, PerspectiveCamera, Scene } from \"three\"",
      "",
      "export default three(({ random, bbox }) => {",
      "\tconst scene = new Scene()",
      "\tscene.background = new Color(\"white\")",
      "\tconst camera = new PerspectiveCamera(75, bbox.width / bbox.height, 0.1, 1000)",
      "",
      "\tconst geometry = new BoxGeometry(1, 1, 1)",
      "\tconst material = new MeshBasicMaterial({ color: new Color(...random.color()) })",
      "\tconst cube = new Mesh(geometry, material)",
      "\tscene.add(cube)",
      "",
      "\tcamera.position.z = 2",
      "\treturn { scene, camera }",
      "})",
      ""
    ]
  },
  "WebGL": {
    "scope": "typescript",
    "prefix": "sketchGL",
    "body": [
      "import { webgl } from \"library/core/sketch\"",
      "import { globalPreamble } from \"library/drawing/shaders\"",
      "import {",
      "\tArrays,",
      "\tcreateBufferInfoFromArrays,",
      "\tcreateProgramInfo,",
      "\tdrawBufferInfo,",
      "\tsetBuffersAndAttributes,",
      "\tsetUniforms,",
      "} from \"twgl.js\"",
      "",
      "export default webgl(({ gl, random }) => {",
      "\tgl.clearColor(0, 0, 0, 1)",
      "",
      "\t// Init buffers",
      "\tconst arrays: Arrays = {",
      "\t\tposition: { numComponents: 2, data: [-0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5] },",
      "\t}",
      "\tconst bufferInfo = createBufferInfoFromArrays(gl, arrays)",
      "\tconst programInfo = createProgramInfo(gl, [vert, frag])",
      "\tlet color = random.color()",
      "",
      "\treturn {",
      "\t\trender() {",
      "\t\t\tgl.clear(gl.COLOR_BUFFER_BIT)",
      "\t\t\tgl.useProgram(programInfo.program)",
      "\t\t\tsetBuffersAndAttributes(gl, programInfo, bufferInfo)",
      "\t\t\tsetUniforms(programInfo, { color })",
      "\t\t\tdrawBufferInfo(gl, bufferInfo)",
      "\t\t},",
      "\t\tnext() {",
      "\t\t\tcolor = random.color()",
      "\t\t},",
      "\t}",
      "})",
      "",
      "const vert = /*glsl*/ `\\${globalPreamble\\}",
      "\tin vec2 a_position;",
      "\tout vec2 v_position;",
      "",
      "\tvoid main() {",
      "\t\tgl_Position = vec4(a_position, 0.0, 1.0);",
      "\t\tv_position = a_position;",
      "\t}",
      "`",
      "",
      "const frag = /*glsl*/ `\\${globalPreamble\\}",
      "\tin vec2 v_position;",
      "\tuniform vec3 color;",
      "\tout vec4 fragColor;",
      "",
      "\tvoid main() {",
      "\t\tfragColor = vec4(color, 1.0);",
      "\t}",
      "`",
      ""
    ]
  },
  "Timed": {
    "scope": "typescript",
    "prefix": "timed",
    "body": [
      "const t0 = performance.now()",
      "console.log('[timer] [${1:timerName}]: begin')",
      "$0",
      "console.log(`[timer] [${1:timerName}]: timer ${((performance.now() - t0) * 0.001).toFixed(3)}s`)"
    ]
  }
}
