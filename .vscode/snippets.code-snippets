{
  // Place your sketches workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // TODO: Update snippets
  "Sketch 2D": {
    "scope": "typescript",
    "prefix": "sketch2d",
    "body": [
      "import { setBackground } from \"drawing/pixi\";",
      "import { run, Params } from \"drawing/sketch\";",
      "import { Container } from \"pixi.js\";",
      "",
      "run((params) => {",
      "  const container = new Container();",
      "  setBackground(container, \"white\", params);$0",
      "  return { container };",
      "}, Params.DEBUG);"
    ]
  },
  "Sketch 3D": {
    "scope": "typescript",
    "prefix": "sketch3d",
    "body": [
      "import { run, Params } from \"drawing/sketch\";",
      "import { PerspectiveCamera, Scene } from \"three\";",
      "",
      "run((params) => {",
      "  const scene = new Scene();",
      "  const camera = new PerspectiveCamera(45, params.width/params.height, 1, 1000);$0",
      "  return { scene, camera };",
      "}, Params.DEBUG);"
    ]
  },
  "Timed": {
    "scope": "typescript",
    "prefix": "timed",
    "body": [
      "const t0 = performance.now()",
      "console.log('[timer] [${1:timerName}]: begin')",
      "$0",
      "console.log(`[timer] [${1:timerName}]: timer ${((performance.now() - t0) * 0.001).toFixed(3)}s`)"
    ]
  }
}
